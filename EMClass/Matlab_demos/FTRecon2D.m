% Proj2D% Make projections of a 2D object and do a filtered% back projection 2D reconstruction.numrot=90;rotStart=1;rotEnd=90;rotStart=30;  % change these to show missing wedge effect.rotEnd=60;pauseTime=.05;  % sets the speed of rotation.% The object is a section of the BRD structure.load brdsect.mat;% brdsect=sm;[n n1]=size(brdsect);% Band-limit it at 0.4 x sampling frequencybrdsect=SharpFilt(brdsect,0.4);%%% NUMBER OF SECTIONS to take.  64 makes a good reconstruction.% numrot=128;qrot=pi/(numrot);  % Quantum of rotation.mask=fuzzymask(n,2,n/2-6,8);mask2=fuzzymask(n,2,n/2-12,4);[X Y]=ndgrid(-n/2:n/2-1);  % Get x and y coordinates of each point.R=sqrt(X.^2+Y.^2);  % R-function for filtering.figure(1);SetComplex;set(gcf,'menubar','none');set(gcf, 'color',[0.4 0.4 0.4]);subplot(2,3,3); imacs(brdsect);title('Object');backp=zeros(n);for i=rotStart:rotEnd	rmap=lrotate(brdsect,qrot*(i-1));  % Rotate the original map	proj=squeeze(sum(rmap));			% compute the X-projection.	proj2=repmat(proj,n,1).*mask;		% expand the projection along X.	subplot(2,3,1); imacs(rmap);	title('rotated object');	subplot(2,3,2); imacs(repmat(proj,8,1));	axis image;    title('projection');	backp=backp+mask.*lrotate(proj2,-qrot*(i-1)); % the back-projection	subplot(2,3,4); imacs(backp);	title('Back projection');	fback=fftshift(fft2(fftshift(backp)));	fbackn=fback; fbackn(n/2+1,n/2+1)=0.1;	subplot(2,3,5); imacx(fbackn.*R.^2,.7);	title('Summed Fourier slices2');	subplot(2,3,6);	imacs(mask2.*real(fftshift(ifft2(fftshift(fback.*R)))));	title('Reconstruction');pause;end;%%%% subplot(2,3,2); imacx(fftshift(fft2(fftshift(brdsect.*R.^2))),0.4);% title('FT of object');