% FTRecon2Db.m% Make projections of a 2D object and do a filtered% back projection 2D reconstruction.% This is the improved version that displays the original object% un-rotated.load brdsect.mat;% Delete everything except the brdsect variable.clear f* i* m* n* o* p* r* s* t* x y zmakeVideo=0; % causes a movie file to be created% % frameSize=[1920 1080];numrot=90; % number of steps per circlerotStart=1;rotEnd=90;vName='FTRecon';if makeVideo    v=VideoWriter([vName '.avi']);            v.FrameRate=15;    open(v);    disp(['Making movie file: ' vName '.avi']);end;% rotStart=30;  % change these to show missing wedge effect.% rotEnd=60;pauseTime=0;  % sets the speed of rotation.% The object is a section of the BRD structure.% brdsect=sm;[n0,ny]=size(brdsect);ctr0=ceil((n0+1)/2);n=NextNiceNumber(n0*1.25);ctr=ceil((n+1)/2);brdsect=Crop(brdsect,n);% Band-limit it at 0.4 x sampling frequency[brdsect,h]=SharpFilt(brdsect,0.4,.05);fMask=fftshift(h);%%% NUMBER OF SECTIONS to take.  64 makes a good reconstruction.% numrot=128;qrot=pi/(numrot);  % Quantum of rotation.mask=fuzzymask(n,2,n/2-6,8);mask2=fuzzymask(n,2,n/2-12,4);[X, Y]=ndgrid(-n/2:n/2-1);  % Get x and y coordinates of each point.R=sqrt(X.^2+Y.^2);  % R-function for filtering.backp=zeros(n);is1=5; % background beam intensityis2=.04; % projection beam intensityis3=1.5; % projection end intensityit1=.2;  % threshold for nonzero beamdw=4;do=ceil(n0/8);np=ceil(n0*0.9);freqs=RadiusNorm(n);  % full-size 2D frequenciesfreqs(freqs==0)=.01;freqs1=sect(freqs);freqs0=RadiusNorm(n0);freqs0(freqs0==0)=.01;freqs10=sect(freqs0);nr=40;cumProj=zeros(n);cumNorm=zeros(n);nf = ones(1,rotEnd-rotStart+1);   % number of identical frames to writenf(1:5)=15;nf(ceil((rotEnd-rotStart)/2+1))=60;figure(1);clf;SetComplex;h=gcf;set(h,'menubar','none');set(gcf, 'color',[0.4 0.4 0.4]);title('Object');% % x0=20;% % y0=20;% % set(gcf,'position',[x0 y0 [x0 y0+20]+frameSize]);subplot(221);imags(Crop(brdsect,n0));axis equal offsubplot(224);normProj=fftshift(fftn(ifftshift(brdsect)));scl=imacx(Crop(normProj,n0),.5);imacx(normProj,.5,scl*3);axis equal off;if makeVideo    f=getframe(gcf);    %     WriteVideo(v,f);    imwrite(f.cdata,[vName '1.jpg']);end;pause(0.5)for i=rotStart:rotEnd    ang=qrot*(i-1);    %     ang=0;    rMap=grotate(brdsect,ang);  % Rotate the original map    cumMap=cumsum(rMap);    %     proj=Crop(cumMap(n,:),n0);    proj=cumMap(n0,:)';    cumMap2=cumMap+is1*repmat(cumMap(end,:)>it1,n,1);    cumMap2c=Crop(cumMap2,np);    cumMap2c(np-dw:np,:)=cumMap2c(np-dw:np,:)*is3;    cumMap2x=Crop(cumMap2c,n);    dMap=rMap+is2*cumMap2x;  % composite map for display    rdMap=grotate(dMap,-ang); % Rotate back so the original map is stationary.    if i==rotStart % to avoid autoscale artifacts, compute the scaling only once.        [~,dMul,dAdd]=imscale(rdMap);    end;    %     Show the object and projection    subplot(2,2,1);    imaga(Crop(rdMap,n0)*dMul+dAdd);    axis equal off;        %     Show the 1D projection in grayscale    row1=round(nr*.1);    subplot(nr,2,2*row1);    imags(Crop(proj,n0));    fProj=fftshift(fft(ifftshift(proj)));    axis off;        %     Show the 1DFT in colors    %     fProj(ctr0)=0;    row2=round(nr*.34);    subplot(nr,2,2*row2);    if i==rotStart        scl1=imacx(fProj,.5);        %         imacx(fProj,.5,scl);    end;    imacx(fProj,.5,scl1*4);    axis off;        %     cumProj=zeros(n);    % cumNorm=zeros(n);                xLine=zeros(n);    xLine(:,ctr)=1;    rLine=grotate(Crop(xLine,n),pi/2-ang);    cumNorm=cumNorm+rLine;        xfProj=zeros(n);    xfProj(:,ctr)=fProj;    %     rfProj=grotate(Crop(xfProj,n),ang);%     gRotate only operates on real numbers, so convert complex to CAS%     first.    rfProj=FromCAS(grotate(ToCAS(Crop(xfProj,n)).*Crop((freqs),n),pi/2-ang));    cumProj=cumProj+rfProj;        k=.01;  % Wiener constant%     normProj=fMask.*cumProj.*cumNorm./(cumNorm.^2+k);    subplot(2,2,4);    axis equal off;        %     Show the reconstructed 2D FT    dExp=.5;    normProj=cumProj.*fMask;    if i==rotStart        scl2=imacx(normProj,dExp);        imacx(normProj,dExp,scl2*1.4);    else        imacx(normProj,dExp,scl2*.7);    end;    axis equal off            subplot(2,2,3);    recon=(fftshift(real(ifftn(ifftshift(normProj)./Crop(freqs0,n,0,1)))));    imags(Crop(recon,n0));    axis equal off;    %    % 	proj=squeeze(sum(Rmap));			% compute the X-projection.    % 	proj2=repmat(proj,n,1).*mask;		% expand the projection along X.    % 	subplot(2,3,1); imacs(Crop(rdMap,n0));    % 	title('rotated object');    % 	subplot(2,3,2); imacs(repmat(proj,8,1));    % 	axis image;    %     title('projection');    % 	backp=backp+mask.*lrotate(proj2,-qrot*(i-1)); % the back-projection    % 	subplot(2,3,4); imacs(backp);    % 	title('Back projection');    % 	fback=fftshift(fft2(fftshift(backp)));    % 	fbackn=fback; fbackn(n/2+1,n/2+1)=0.1;    % 	subplot(2,3,5); imacx(fbackn.*R.^2,.7);    % 	title('Summed Fourier slices2');    % 	subplot(2,3,6);    % 	imacs(mask2.*real(fftshift(ifft2(fftshift(fback.*R)))));    % 	title('Reconstruction');    pause(pauseTime);    if i==rotStart        pause(0.5);    end;    if makeVideo        f=getframe(gcf);        for j=1:nf(i-rotStart+1)            writeVideo(v,f);        end;        if i==rotStart            imwrite(f.cdata,[vName '2.jpg']);        end;    end;end;    if makeVideo        close(v);    end;    %%%    % subplot(2,3,2); imacx(fftshift(fft2(fftshift(brdsect.*R.^2))),0.4);    % title('FT of object');    