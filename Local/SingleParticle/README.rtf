{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12200\viewh13220\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Enclosed is the new set of code for the Matlab demonstration, and a script, called RunMiniStack.m, which does everything we did in class Tuesday.  You can use cell mode (menu Cell -> Evaluate Current Cell and Advance) to execute it bit by bit so you can see the intermediate results.\
\
Here are a few Matlab tips\
\
0.  To install the software you have to go to File -> Set Path and tell it "Add with Subfolders" and select the MBB710Code folder.\
\
1.  If you just type a variable name, it prints out the contents of that variable.  \
For example, you can see what's in the stack parameters data structure\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f1 \cf0 >> sp\
sp = \
        pixA: 5.8\
     boxSize: 32\
       trans: [8000x2 double]\
         rot: [8000x1 double]\
        refN: [8000x1 double]\
    thetaPhi: [8000x2 single]\
          cc: [8000x1 double]\
         amp: [8000x1 single]\
      active: [8000x1 uint8]\
        flip: [8000x1 double]\
       class: [8000x1 double]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0 \cf0 and you can see the first 10 entries in the image translation field by typing\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f1 \cf0 >> sp.trans(1:10,:)    % 
\f0 show the first 10 rows and all the columns
\f1 \
ans =\
     -0.60369      0.13679\
      0.63711     -0.29422\
    -0.044205      0.49295\
     -0.40234    -0.060183\
     -0.33881      0.55605\
     -0.63343     -0.76627\
     -0.84767     -0.38371\
      -2.0562    -0.093651\
     -0.77805     -0.52382\
     -0.71148      0.17544\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0 \cf0 \
The automatic listing of the contents of a variable can be a problem if say you type the name of an image stack containing millions of elements!  In that case you can stop the listing with control-C.  Likewise the value in any assignment statement or function call is typed out if you don't end the statement with a semicolon.  That's why it is important to end statements with semicolons!\
\
2.  Type help followed by the function name to get simple help for using the function.\
\
3.  Tools for displaying images are important.  Here are some.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f1 \cf0 - figure   % creates a new figure window\
- SetGrayscale  % 
\f0 If you get a false-color image when you don't want one, type this.
\f1 \
- imacs( img )  % 
\f0 Displays img.  The name stands for "image in cartesian coordinates, autoscaled gray levels.
\f1 \
- imats( stack ) % 
\f0 Fills the current figure window with the first images in a stack.  If you want to see more images, resize the window and execute the command again.  An optional second argument sets the scale of the display.  Thus  
\f1 imats( stack, 2 ) 
\f0 scales up the display by 2.  You can select which elements of the stack to show, e.g.
\f1  imats( stack(:,:,101:200) )
\f0  shows images 101 to 200 in the stack.
\f1 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0 \cf0 4.  There is also an example 3D projection-matching refinement script, TestProjMatching.m.  \
\
}